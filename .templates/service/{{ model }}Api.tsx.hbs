import {
  createContext,
  ReactElement,
  ReactNode,
  useContext,
  useMemo,
} from "react";
import { QueryFunction } from "react-query";

type {{ model }}Id = string;

export type {{ model }} = {
  id: {{ model }}Id;
  data?: string;
};

type {{ model }}Key = ["{{ camelCase model }}", {{ model }}Id];

export type {{ model }}ApiService = {
  get: QueryFunction<{{ model }}, {{ model }}Key>;
  key: (id: {{ model }}Id) => {{ model }}Key;
};

type {{ model }}ApiContextValue =
  | {
      isInitialized: false;
    }
  | {
      isInitialized: true;
      api: {{ model }}ApiService;
    };

export const {{ model }}ApiContext = createContext<{{ model }}ApiContextValue>({
  isInitialized: false,
});

export const use{{ model }}Api = (): {{ model }}ApiService => {
  const context = useContext({{ model }}ApiContext);

  if (!context.isInitialized) {
    throw new Error("{{ model }} Api context not defined");
  }

  return context.api;
};

type Props = {
  children: ReactNode;
};

export const {{ model }}ApiProvider = ({ children }: Props): ReactElement => {
  const value = useMemo<{{ model }}ApiContextValue>(() => {
    return {
      isInitialized: true,
      api: {
        get: async ({ queryKey }) => {
          return Promise.resolve({ id: queryKey[1] });
        },
        key: (id) => {
          return ["{{ camelCase model }}", id];
        },
      },
    };
  }, []);

  return (
    <{{ model }}ApiContext.Provider value={value}>
      {children}
    </{{ model }}ApiContext.Provider>
  );
};
